{"version":3,"sources":["fase.png","index.js"],"names":["Square","props","chess","value","checkedHint","style","color","fontFamily","className","onClick","is_x_next","Board","i","this","squares","board","dimension","row","j","push","renderSquare","React","Component","Game","original_board","Array","fill","hint_board","slice","hintMove","state","history","stepNumber","latest_squares","is_player_vs_computer","dropdown_arr","selector","player","dim","x","y","_xy","_y","Math","floor","console","log","black_score","white_score","anyMove","end","black","white","win","checkMove","move_check","any_valid","msg","opponent","target_xy","map_arr_to_xy","is_legal","validation_check","overall_check","look_down","validation_row","look_right","current_xy","JSON","parse","stringify","is_xy_out_of_bound","current_i","map_xy_to_arr","direction_checks","validation_check_arr","endMove","is_end","calculateScore","next_player","setState","concat","length","opponentMove","player_color","that","then","res","formData","FormData","boardStr","append","fetch","method","body","response","json","responseData","board_str","updated_board","parseInt","endMoveWrapper","e","initGame","makeMove","step","name","event","target","checked","status","score","map","move","desc","jumpTo","side_info","width","display","justifyContent","alignItems","handleClick","marginTop","Dropdown","DropdownButton","id","title","onSelect","changeOpponent","Item","as","eventKey","Button","variant","size","changeSide","marginLeft","type","onChange","handleButton","readOnly","htmlFor","Index","height","fontSize","Row","Col","md","Image","src","logo","fluid","paddingLeft","margin","bottom","position","borderTopStyle","borderWidth","borderColor","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d678d02d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/fase.f659fc25.png\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Col, Image, Row} from \"react-bootstrap\";\n// import BootstrapSwitchButton from 'bootstrap-switch-button-react'\n// import { Button } from '@material-ui/core';\nimport * as Icon from 'react-bootstrap-icons';\nimport logo from './fase.png'\n\nfunction Square(props) {\n    const chess = props.value === 1 ? '●': (props.value === 2 ? '○' : '');\n\n    if (props.checkedHint && props.value === 3) {\n        return (\n            <button style={{color: \"orange\", fontFamily: \"sans-serif\"}} className=\"square\" onClick={props.onClick}>\n                {props.is_x_next ? '●': '○'}\n            </button>\n        );\n    } else {\n        return (\n            <button style={{fontFamily: \"sans-serif\"}} className=\"square\" onClick={props.onClick}>\n                {chess}\n            </button>\n        );\n    }\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                checkedHint = {this.props.checkedHint}\n                is_x_next = {this.props.is_x_next}\n            />\n        );\n    }\n\n    render() {\n        const board = [];\n        for(let i = 0; i < this.props.dimension; i++){\n            const row = [];\n            for(let j = 0; j < this.props.dimension; j++){\n                row.push(this.renderSquare(i * this.props.dimension + j));\n            }\n            board.push(<div className='board-row'>{row}</div>);\n        }\n\n        return (\n            <div>\n                {board}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        let original_board = Array(64).fill(0);\n        // initialize the board\n        original_board[3 * 8 + 3] = 1;\n        original_board[3 * 8 + 4] = 2;\n        original_board[4 * 8 + 3] = 2;\n        original_board[4 * 8 + 4] = 1;\n\n        let hint_board = original_board.slice();\n\n        this.hintMove(hint_board, true);\n\n        this.state = {\n            history: [{\n                squares: original_board\n            }],\n            is_x_next: true,\n            stepNumber: 0,\n            checkedHint: false,\n            latest_squares: hint_board,\n            is_player_vs_computer: true,\n\n            // dropdown menu\n            dropdown_arr: [\"APS105-smarter\", \"APS105-smartest\", \"sandbox\"],\n            selector: 0,\n\n            // switch side button\n            player: true, // true: black, false: white\n        };\n    }\n\n    //############ Util Functions #############//\n    is_xy_out_of_bound(dim, x, y){\n        if(x < 0 || y < 0) return true;\n        if(x >= dim || y >= dim) return true;\n\n        return false;\n    }\n\n    map_xy_to_arr(dim, _xy) {\n        return _xy.y * dim + _xy.x;\n    }\n    \n    map_arr_to_xy(dim, i) {\n        const _y = Math.floor(i / dim);\n        return {x: i - dim * _y, y: _y}\n    }\n\n    //############ Helper Functions #############//\n    // check whether the game finishes and if finished, who wins\n    calculateScore(board) {\n        console.log(\"CS\")\n        console.log(board)\n        let black_score = 0;\n        let white_score = 0;\n        for(let i = 0; i < 64; i++){\n            if (board[i] === 1) { black_score++; }\n            else if (board[i] === 2) { white_score++; }\n        }\n\n\n        if((!this.anyMove(board, true)) && (!this.anyMove(board, false))){\n            if ( black_score > white_score ) { return {end: true, win: 1, black: black_score, white: white_score} }\n            else if ( black_score === white_score) { return {end: true, win: 0, black: black_score, white: white_score} }\n            else { return {end: true, win: 2, black: black_score, white: white_score} }\n        }\n\n        return {end: false, black: black_score, white: white_score}\n    }\n\n    // Check whether the player has any valid move\n    anyMove(board, is_x_next) {\n        for(let i = 0; i < 64; i++){\n            const validation_check = this.checkMove(board, i, is_x_next);\n            if (validation_check.move_check) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Check whether the player has any valid move and mark the valid moves\n    // return: true if the player has any valid move\n    // Note: board will be changed in-place\n    hintMove(board, is_x_next) {\n        console.log('hint')\n        console.log(board)\n        let any_valid = false;\n        for(let i = 0; i < 64; i++){\n            const validation_check = this.checkMove(board, i, is_x_next);\n            if (validation_check.move_check) {\n                board[i] = 3;\n                any_valid = true;\n            }\n        }\n        return any_valid;\n    }\n\n    // Check whether a move on the board is legal\n    // Return: {move_check: bool, direction_checks: 2D array of bool [3 * 3], msg: string};\n    // Notice: If move_check is false, direction_checks will be null\n    checkMove(board, i, is_x_next) {\n        if (board[i] !== 0 && board[i] !== 3) {\n            return {move_check: false, msg: \"Spot already taken\"};\n        }\n\n        const player = is_x_next ? 1 : 2;\n        const opponent = is_x_next ? 2 : 1;\n\n        let target_xy = this.map_arr_to_xy(8, i);\n        let is_legal = false;\n        let validation_check = []; // indicates whether the move is valid regards 9 different directions. (middle one is meaningless)\n        let overall_check = false; // indicates whether the move is valid or not\n\n        for(let look_down = -1; look_down <= 1; look_down++){\n            if(is_legal) { break; }\n            let validation_row = []\n            for(let look_right = -1; look_right <= 1; look_right++) {\n                if(look_down === 0 && look_right === 0) { validation_row.push(false);continue; }\n                if(is_legal) { break; }\n                let current_xy = JSON.parse(JSON.stringify(target_xy));\n                while(true){\n                    current_xy.y += look_down;\n                    current_xy.x += look_right;\n                    if(this.is_xy_out_of_bound(8, current_xy.x, current_xy.y)){\n                        is_legal = false;\n                        break;\n                    }\n\n                    let current_i = this.map_xy_to_arr(8, current_xy);\n                    if(board[current_i] === opponent){\n                        is_legal = true;\n                    }else if(board[current_i] === player){\n                        break;\n                    }else if(board[current_i] === 0 || board[current_i] === 3){\n                        is_legal = false;\n                        break;\n                    }\n                }\n                validation_row.push(is_legal);\n                if (is_legal) {\n                    overall_check = true;\n                }\n                is_legal = false;\n            }\n            validation_check.push(validation_row);\n        }\n\n        return {move_check: overall_check, direction_checks: validation_check, msg: \"Illegal Move\"};\n    }\n\n    // Make a move on the board\n    // Return: None\n    // Notice: 1. ALWAYS call checkMove before call this function\n    //         2. board will be modified\n    makeMove(board, i, validation_check_arr, is_x_next) {\n        const player = is_x_next ? 1 : 2;\n        const opponent = is_x_next ? 2 : 1;\n        let target_xy = this.map_arr_to_xy(8, i);\n        board[i] = player;\n\n        for(let look_right = -1; look_right <= 1; look_right++){\n            for(let look_down = -1; look_down <= 1; look_down++){\n                if (look_right === 0 && look_down === 0) {continue;}\n\n                if(validation_check_arr[look_down + 1][look_right + 1]){\n                    let current_xy = JSON.parse(JSON.stringify(target_xy));\n                    current_xy.x += look_right;\n                    current_xy.y += look_down;\n                    while(board[this.map_xy_to_arr(8, current_xy)] === opponent){\n                        board[this.map_xy_to_arr(8, current_xy)] = player;\n                        current_xy.x += look_right;\n                        current_xy.y += look_down;\n                    }\n                }\n            }\n        }\n    }\n\n    endMoveWrapper(board, is_x_next) {\n        console.log(\"endMoveWrapper\")\n        console.log(board)\n\n        this.endMove(board, is_x_next);\n        // console.log(next_is_x)\n\n        // if (!(next_is_x === this.state.player)) {\n        //     if (this.state.dropdown_arr[this.state.selector] !== \"sandbox\"){\n        //         this.opponentMoveWrapper(board);\n        //     }\n        // }\n    }\n\n    endMove(board, is_x_next) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        let is_end = this.calculateScore(board).end;\n        console.log(\"is_end: \" + is_end)\n\n        let hint_board = board.slice();\n\n        this.hintMove(hint_board, !is_x_next);\n\n        let next_player = is_x_next;\n        if (!is_end) {\n            next_player = !is_x_next;\n            if (this.anyMove(board, next_player)) {\n                this.setState({\n                    is_x_next: next_player,\n                })\n            }\n        }\n\n        return this.setState({\n            history: history.concat([{\n                squares: board\n            }]),\n            latest_squares: hint_board,\n            stepNumber: history.length,\n        }, function() {\n            console.log(\"endMove - callback\")\n            if(is_end){\n                return\n            }\n\n            if (!(next_player === this.state.player)) {\n                if (this.state.dropdown_arr[this.state.selector] !== \"sandbox\"){\n                    this.opponentMove(board);\n                    // console.log(board);\n                }\n            }\n        })\n\n        // return next_player;\n    }\n\n    initGame(player_color) {\n        var that = this;\n        let original_board = Array(64).fill(0);\n        // initialize the board\n        original_board[3 * 8 + 3] = 1;\n        original_board[3 * 8 + 4] = 2;\n        original_board[4 * 8 + 3] = 2;\n        original_board[4 * 8 + 4] = 1;\n\n        this.setState ({\n            is_player_vs_computer: true,\n        });\n\n        if (!player_color && this.state.dropdown_arr[this.state.selector] !== \"sandbox\") {\n            // request opponent to make a move first\n            this.opponentMove(original_board).then(function(res) {\n                let hint_board = res.slice();\n\n                that.setState({\n                    history: [{\n                        squares: res,\n                    }],\n                    latest_squares: hint_board,\n                    is_x_next: false,\n                    stepNumber: 1,\n                })\n\n                that.hintMove(hint_board, false);\n            })\n        } else {\n            let hint_board = original_board.slice();\n\n            this.setState ({\n                history: [{\n                    squares: original_board,\n                }],\n                is_x_next: true,\n                stepNumber: 0,\n                latest_squares: hint_board,\n            });\n\n            this.hintMove(hint_board, true)\n        }\n    }\n\n    //########## Function used to process AI moves ###########//\n\n    opponentMove(squares) {\n        const formData = new FormData();\n        let boardStr = \"\";\n\n        for(let i = 0; i < squares.length; i++){\n            boardStr += squares[i];\n        }\n\n        formData.append('board', boardStr);\n        formData.append('color', !this.state.player);\n        formData.append('AI_player', this.state.dropdown_arr[this.state.selector]);\n\n        return fetch('http://localhost:8000/api/get_next', {\n            method: 'POST',\n            body: formData,\n        }).then((response) => response.json()).then((responseData) => {\n            let board_str = responseData.updated_board\n            let board = Array(64).fill(0);\n            for(let i = 0; i < board_str.length; i++){\n                board[i] = parseInt(board_str[i]);\n            }\n\n            this.endMoveWrapper(board, !this.state.player);\n\n            return board;\n        })\n    }\n\n    //############ Main click handling Functions #############//\n    changeOpponent(e) {\n        this.setState({\n            selector: e\n        },() => {\n            this.initGame();\n        })\n    }\n\n    changeSide() {\n        var that = this;\n        console.log(this.state.player)\n        this.setState({\n            player: !this.state.player\n        },() => {\n            that.initGame(this.state.player)\n        })\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const squares = history[history.length - 1].squares.slice();\n        console.log(history);\n\n        if (squares[i] !== 0 && squares[i] !== 3) {\n            this.setState({\n                msg: \"Invalid move\"\n            })\n            return;\n        } else {\n            this.setState({\n                msg: \"\"\n            })\n        }\n\n        const validation_check = this.checkMove(squares, i, this.state.is_x_next)\n        console.log(validation_check)\n\n        if (validation_check.move_check) {\n            this.makeMove(squares, i, validation_check.direction_checks, this.state.is_x_next);\n            this.endMoveWrapper(squares, this.state.is_x_next)\n        } else {\n            this.setState({\n                msg: validation_check.msg\n            });\n        }\n\n        console.log(\"end handle click\")\n    }\n\n    jumpTo (step) {\n        const squares = this.state.history[step].squares.slice();\n        const valid_next = this.hintMove(squares, (step % 2 === 0));\n\n        this.setState({\n            stepNumber: step,\n            is_x_next: (step % 2) === 0,\n            latest_squares: squares,\n        })\n    }\n\n    handleButton(name, event) {\n        this.setState({[name]: event.target.checked});\n    }\n\n    render() {\n        const history = this.state.history;\n        const score = this.calculateScore(this.state.latest_squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n\n        let status;\n        let err_msg = this.state.msg;\n        if (score.end) {\n            status = 'Winner: ' + (score.win === 1 ? '⚫' : '⚪');\n            err_msg = \"Game already over\"\n        } else {\n            status = 'Next player: ' + (this.state.is_x_next ? '⚫' : '⚪');\n        }\n\n        let opponent = this.state.dropdown_arr[this.state.selector];\n        let side_info;\n        if (this.state.player) {\n            side_info = \"⚫ Player(\" + score.black + \") VS. \" + opponent + \"(\" + score.white + \") ⚪\";\n        } else {\n            side_info = \"⚫ \" + opponent + \"(\" + score.black + \") VS. Player(\" + score.white + \") ⚪\";\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\" style={{width: \"50vw\", display: \"flex\", justifyContent: \"center\", alignItems: \"right\"}}>\n                    <Board\n                        squares={this.state.latest_squares}\n                        onClick={(i) => this.handleClick(i)}\n                        dimension={8}\n                        checkedHint = {this.state.checkedHint}\n                        is_x_next = {this.state.is_x_next}\n                    />\n                </div>\n                <div className=\"game-info\" style={{width: \"50vw\"}}>\n                    <h4>Match Status</h4>\n                    <div style={{marginTop: '20px',}}>{side_info}</div>\n                    <div>{status}</div>\n                    <div style={{color: 'red',}}>{this.state.msg}</div>\n\n                    <h5 style={{marginTop: \"50px\"}}>Choose your opponent</h5>\n\n                    <Dropdown>\n                        <DropdownButton id=\"dropdown-item-button\" title={opponent} onSelect={(e) => this.changeOpponent(e)}>\n                            <Dropdown.Item as=\"button\" eventKey='0'>APS105-smarter</Dropdown.Item>\n                            <Dropdown.Item as=\"button\" eventKey='1'>APS105-smartest</Dropdown.Item>\n                            <Dropdown.Item as=\"button\" eventKey='2'>sandbox</Dropdown.Item>\n                        </DropdownButton>\n                    </Dropdown>\n\n\n                    <div>\n                        <Button style={{marginTop: '10px',}} variant=\"outline-primary\" size=\"sm\" onClick={(e) => this.changeSide()}>\n                            <Icon.ArrowLeftRight />Switch Side\n                        </Button>\n                        <Button style={{marginLeft: '10px',marginTop: '10px',}} variant=\"outline-primary\" size=\"sm\" onClick={(e) => this.changeSide()}>\n                            <Icon.ArrowCounterclockwise />Restart\n                        </Button>\n                    </div>\n\n                    <div className='custom-control custom-switch' style={{marginTop: '10px'}}>\n                        <input\n                            type='checkbox'\n                            className='custom-control-input'\n                            id='customSwitches'\n                            checked={this.state.checkedHint}\n                            onChange={(e) => {this.handleButton('checkedHint', e)}}\n                            readOnly\n                        />\n                        <label className='custom-control-label' htmlFor='customSwitches'>\n                            Show Next Step Hint\n                        </label>\n                    </div>\n\n\n                    {/*<ol>{moves}</ol>*/}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Index extends React.Component {\n\n    render() {\n        return (\n        <div className=\"Index\" style={{height: \"100%\"}}>\n            <div className=\"Title\" style={{height:\"150px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", fontSize: \"38px\"}}>\n                <Row style={{width: \"100%\"}}>\n                    <Col md={3} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                        <Image style={{height: \"60px\"}} src={logo} fluid/>\n                    </Col>\n                    <Col md={9} style={{paddingLeft: \"10%\"}}>\n                        APS105 Reversi Interactive Platform\n                    </Col>\n                </Row>\n\n            </div>\n            <div className=\"Gameboard\" style={{margin: \"50px\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                <Game />\n            </div>\n\n            <footer style={{bottom:\"10px\", width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\", fontSize: \"20px\", position: \"absolute\"}}>\n                <div style={{borderTopStyle: \"solid\", borderWidth: \"2px\", width: \"100%\", borderColor: \"#CCCCCC\"}}>\n                    <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", padding: \"20px\"}}>\n                        &copy; 2021 copyright APS105 Teaching Team, University of Toronto\n                    </div>\n                </div>\n\n            </footer>\n        </div>\n    )}\n\n}\n\n// ========================================\n\nReactDOM.render(\n    <Index />,\n    document.getElementById('root')\n);"],"sourceRoot":""}